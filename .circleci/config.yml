defaults: &defaults
  working_directory: ~/props
  docker:
    - image: circleci/ruby:2.5.1-node-browsers
      environment:
        - RAILS_ENV=test
    - image: circleci/postgres:latest
      environment:
        - POSTGRES_USER=props
        - POSTGRES_HOST_AUTH_METHOD=trust

version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-code-deploy: circleci/aws-code-deploy@1.0.1
  aws-ecr: circleci/aws-ecr@6.8.2
  tools: netguru/tools@dev:internal

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/props
          paths:
            - .

  build:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/props
      - run: yarn
      - run: bundle install --jobs=4 --retry=3 --path vendor/bundle --without development
      - persist_to_workspace:
          root: .
          paths:
            - vendor/bundle
            - node_modules

  run_tests:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/props
      - run: bundle --path vendor/bundle --without development
      - run: cp config/database.yml.sample config/database.yml
      - run: bundle exec rake db:create db:schema:load --trace
      - run: bundle exec rake db:migrate
      - run: yarn test
      - run: bundle exec rspec --colour --profile 10 --order rand spec --format progress

  build_image:
    executor:
      name: aws-ecr/default
      use-docker-layer-caching: true
    steps:
      - run:
          name: 'set ENV for deploying staging'
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID' >> $BASH_ENV;
            echo 'export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY' >> $BASH_ENV;
            source $BASH_ENV
      - aws-ecr/build-and-push-image:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          account-url: STAGING_AWS_ECR_ACCOUNT_URL
          repo: calluna-ecr-props-be-staging
          tag: ${CIRCLE_SHA1}
          dockerfile: docker/staging/Dockerfile

  deploy_to_staging:
    working_directory: ~/props
    executor: aws-cli/default
    steps:
      - run:
          name: 'set ENV for deploying staging'
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID' >> $BASH_ENV;
            echo 'export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY' >> $BASH_ENV;
            source $BASH_ENV
      - run:
          name: Configure deployment
          command: |
            echo IMAGE=${STAGING_AWS_ECR_ACCOUNT_URL}/calluna-ecr-props-be-staging:${CIRCLE_SHA1} >> codedeploy/parameters
      - aws-cli/setup:
          aws-region: AWS_DEFAULT_REGION
      - aws-code-deploy/push-bundle:
          application-name: calluna-props-be-staging-main_app
          bundle-bucket: calluna-bucket-props-be-staging
          bundle-key: codedeploy/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM
      - aws-code-deploy/deploy-bundle:
          application-name: calluna-props-be-staging-main_app
          deployment-group: calluna-props-be-staging-main_app-group
          bundle-bucket: calluna-bucket-props-be-staging
          bundle-key: codedeploy/$CIRCLE_PROJECT_REPONAME-$CIRCLE_BUILD_NUM

  deploy_production:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/props
      - run: bundle --path vendor/bundle --without development
      - run: bundle exec cap production deploy

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout_code
      - build:
        requires:
          - checkout_code
      - run_tests:
          requires:
            - build
      - build_image:
          requires:
            - run_tests
          filters:
            branches:
              only:
                - master
                - codedeploy
      - deploy_to_staging:
          requires:
            - build_image
          filters:
            branches:
              only:
                - master
                - codedeploy
      - deploy_production:
          requires:
            - run_tests
          filters:
            branches:
              only: production

notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/5d08569c0fcb0d849f50
